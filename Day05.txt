1、定位
	1、堆叠顺序
		1、什么是堆叠顺序
			改变元素定位方式之后，有可能会发生堆叠效果，实际上是由"堆叠顺序"来决定排位效果的
		2、语法
			属性：z-index
			取值：无单位的数字，数字越大，越靠前(离用户越近)
		3、注意
			1、必须是已定位元素(relative/absolute/fixed)才能使用z-index
			2、如果z-index相同的话，则后出现的在上面(后来者居上)
			3、父子级元素中，永远都是子压在父上，不受z-index 控制的
	2、固定定位
		1、什么是固定定位
			让元素始终固定在页面的某个位置处，不受滚动条滚动而发生位置的改变影响
		2、语法
			position:fixed;
			配合着 top/right/bottom/left 实现位置的改变
		3、注意
			1、固定定位元素会脱离文档流
			2、固定定位元素会变成块级元素
			3、固定定位的元素无论写在哪，永远都是相对于body去实现位置初始化的

2、复杂选择器
	1、兄弟选择器
		兄弟元素：具备相同父元素的平级元素称之为 "兄弟元素"
			<div>
				<p id="p1">我是p1</p>
				<p id="p2">我是p2</p>
				<p id="p3">我是p3</p>
			</div>
		注意：兄弟选择器，只能向后找，不能向前找
		1、相邻兄弟选择器
			作用：获取紧紧挨在某元素后的兄弟元素
			语法：选择器1+选择器2{ ... }
			ex:
				1、#p1+#p2{ 背景红色 }
				2、#p1+p{ 文字改为加粗 }
				3、p+p { 文本颜色黄色 }
		2、通用兄弟选择器
			作用：获取某元素后所有满足条件的兄弟元素
			语法：选择器1~选择器2{ ... }
			ex:
				#p1~p{ font-size:24px; }
			练习：
				<h3>静夜思</h3>
				<div>床前明月光</div>
				<div>疑是地上霜</div>
				<div>举头望明月</div>
				<div>低头思故乡</div>
			通过兄弟选择器完成以下操作：
				1、h3 与 div 之间有 30px 的外边距
				2、从第2个div开始，每个div都10px的上外边距
	2、属性选择器
		1、作用
			允许通过元素所附带的属性及其值来匹配元素的
		2、语法
			1、基本语法
				[attr]
					attr:表示页面中元素的任意属性名称
					作用:匹配页面中附带attr属性的元素
				ex:
					1、[id] : 匹配页面中所有附带id属性的元素
					2、[class]:匹配页面中所有附带class属性的元素
			2、选择器[attr]
				作用匹配附带attr属性并满足指定选择器的元素
				ex:
					1、div[id]:匹配页面中所有附带id属性的div元素
					2、.important[name]:匹配页面中所有附带name属性并且class为important的元素
			3、[attr1][attr2]...
				作用：匹配同时附带多个属性的页面元素
				ex:
					1、div[id][class]
						匹配页面中同时附带id 和 class属性的div元素
			4、[attr=value]
				作用：匹配attr属性值为 value 的元素
				ex:
					1、匹配页面中所有的文本框
						input[type=text]
						input[type="text"]
						input[type='text']
					2、匹配页面中id为container的div元素
						div[id="container"] == #container
					3、匹配页面中所有引用 important 类选择器的元素
						[class="important"] == .important
	3、伪类选择器
		1、作用
			匹配元素不同的状态
			已学过的伪类：
				1、链接伪类
					:link , :visited
				2、动态伪类
					:hover,:active,:focus
		2、详解
			1、目标伪类
				作用：突出显示活动的html锚点元素(匹配被激活的锚点)
				语法：selector:target{ ... }
					1、div:target{ ... }
					2、#content:target{ ... }
			2、结构伪类
				作用：通过元素之间的结构关系来匹配元素
				1、:first-child
					匹配的元素是属于其父元素中的首个子元素
					<div id="container">
						<p>p1</p>
						<p>p2</p>
						<p>p3</p>
						<p>p4</p>
						<p>p5</p>
					</div>
					ex:
						p:first-child{}
				2、:last-child
					匹配的元素是属于其父元素中的最后一个子元素
					ex:
						p:last-child{}
					练习：
						1、创建02-selector-struct.html
						2、创建一个 4*4表格 ，内容随意
						3、设置第一行数据的背景颜色为黄色
						4、设置最后一行数据的背景颜色为红色
				3、:nth-child(n)
					匹配的元素是属于其父元素中的第n个子元素
						:nth-child(1) --> :first-child
					练习：
						将第2行中的第3列的背景改为 orange
				4、:empty
					匹配的是没有子元素的元素
				5、:only-child
					匹配的元素是属于其父元素中的唯一子元素
			3、否定伪类
				作用：将满足指定选择器的元素给排除出去
				语法：:not(selector)
					#tbl tr:not(:first-child){
						font-size:48px;
					}
				练习：
					设置每行中除第一列以外的所有列，文字以加粗和斜体的方式显示
	4、伪元素选择器
		伪类：匹配到的是完整的元素
		伪元素：某元素中的部分内容
		1、:first-letter 或 ::first-letter
			作用：匹配某个元素的首字符
		2、:first-line 或 ::first-line
			作用：匹配某个元素的首行
		3、::selection
			作用：匹配被用户选取的内容
			注意：只能修改文本颜色 和 背景颜色
		练习：
			1、创建一个网页 02-selector-weiElement.html
			2、创建一个div，id为d1，内容随意
			3、将d1中的首字符的样式设置为，加粗，红色，大小20pt的，右外边距15px
			4、将d1中的首行文本设置为，颜色orange，斜体
			5、将用户选取的内容设置为红色背景黄色的子
3、内容生成
	1、什么是内容生成
		使用css向某元素内插入一段内容
	2、伪元素选择器
		1、:before 或 ::before
			作用：匹配到某元素内容区域之前
			<p>(:before)窗前明月光</p>
		2、:after 或 ::after
			作用：匹配到某元素内容区域之后
			<p>疑是地上霜(:after)</p>
	3、属性
		属性：content
		作用：向匹配到的位置处增加内容
		取值：
			1、字符串 ：用 "" 引起来的普通文本
			2、url() ：生成一副图像
	练习：
		<p>学而时习之，不亦说乎</p>
		<p>三人行，必有我师焉</p>
		<p>吾日三省吾身，高否，富否，帅否</p>

		子曰：学而时习之，不亦说乎
														-摘自《论语》
		子曰：三人行，必有我师焉
														-摘自《论语》
		子曰：吾日三省吾身，高否，富否，帅否
														-摘自《论语》
	4、解决问题
		1、浮动元素父元素高度问题
			.clear:after{
        content:"";
        /*变为块级 或 table*/
        display:block;
        /*清除两端浮动*/
        clear:both;
      }
		2、外边距的溢出问题
			<div id="d1"></div>
			<div id="d2">
				<div id="d3"></div>
			</div>
			#d2:before{
				content:"";
				display:table;
			}
4、弹性布局(Flexible Layout)
	1、什么是弹性布局
		弹性布局，一种布局方式，主要是解决某元素中"子元素"的布局方式。为布局提供最大的灵活性
	2、相关概念
		1、弹性布局的容器
			父元素，称为"弹性布局容器"，简称为"容器"
		2、弹性布局的项目
			要实现布局效果的元素，称为"弹性布局的项目"简称为"项目"
		3、主轴(Main Axsis)
			决定项目们排列方向的一根轴，称为 主轴
			如果项目们按x轴排列的话(横向排列)，那么x轴就是主轴
			如果项目们按y轴排列的话(纵向排列)，那么y轴就是主轴
		4、交叉轴(Cross Axsis)
			与主轴相交叉的一根轴，就是交叉轴
			如果主轴是x轴的话，那么y轴就是交叉轴
			如果主轴是y轴的话，那么x轴就是交叉轴
	3、语法
		1、弹性布局的容器
			只有将元素变为弹性布局的容器后，子元素们才能按照弹性布局的方式进行排列
			如何将元素变为弹性布局的容器呢？？？
			属性：display
			取值：
				1、flex 
					将块级元素变为弹性布局容器
				2、inline-flex
					将行内元素变为弹性布局容器
			注意：
				1、元素变为容器后，子元素的float,clear,vertical-align将全部失效
				2、元素变为容器后，子元素将变为块级元素，尺寸，外边距都可以正常处理
				3、容器的 text-align 属性，也会失效
		2、容器的属性
			该组属性是要加载在容器上的，负责控制所有项目的特征的
			1、flex-direction
				作用：指定容器的主轴及其排列方向
				取值：
					1、row
						默认值，主轴为x轴，起点在左端(从左向右排列)
					2、row-reverse
						主轴为x轴，起点在右端(从右向左排列)
					3、column
						主轴为y轴，起点在顶端
					4、column-reverse
						主轴为y轴，起点在底端 
			2、flex-wrap
				作用：当一个主轴排列不下所有项目时，该如何换行
				取值：
					1、nowrap
						默认值，即空间不足时，也不换行，但项目会自动缩小
					2、wrap
						换行
					3、wrap-reverse
						换行，向上换行
			3、flex-flow
				作用：是 flex-direction 和 flex-wrap的缩写
				取值：
					1、row nowrap (默认值)
					2、direction wrap
			4、justify-content
				作用：定义项目在主轴上的对齐方式
				取值：
					1、flex-start
						在主轴的起点对齐
					2、flex-end
						在主轴的终点对齐
					3、center
						在主轴上居中对齐
					4、space-between(重点)
						两端对齐
					5、space-around
						每个项目两端的距离是相等的
			5、align-items
				作用：定义项目在交叉轴上的对齐方式
				取值：
					1、flex-start
						在交叉轴的起点对齐
					2、flex-end
						在交叉轴的终点对齐
					3、center
						在交叉轴上居中对齐
					4、baseline
						在交叉轴上基线对齐
					5、stretch
						默认值，如果项目未设置尺寸，将在交叉轴上沾满所有的空间
